firstStateMachine:
  name: first${self:provider.stage}StateMachine
  role: !GetAtt StateMachineRole.Arn
  definition:
    Comment: "First iteration"
    StartAt: createInvoice
    States:
      createInvoice:
        Type: Task
        Resource: !GetAtt createInvoice.Arn
        Next: pendingPick
      pendingPick:
        Type: Task
        Resource: arn:${AWS::Partition}:states:::lambda:invoke.waitForTaskToken
        Parameters:
          FunctionName: !GetAtt pendingInput.Arn
          Payload:
          - taskToken.$: $$.Task.Token
          - order.$: "$"
        Next: emailCustomer
      emailCustomer:
        Type: Task
        Resource: !GetAtt emailCustomer.Arn
        End: true

secondStateMachine:
  name: second${self:provider.stage}StateMachine
  role: !GetAtt StateMachineRole.Arn
  definition:
    Comment: "Second iteration"
    StartAt: createInvoice
    States:
      createInvoice:
        Type: Task
        Resource: !GetAtt createInvoiceTwo.Arn
        Next: createOrderRecord
      createOrderRecord:
        Type: Task
        Resource: !GetAtt createOrderRecordTwo.Arn
        Next: notifyStore
      notifyStore:
        Type: Task
        Resource: !GetAtt notifyStoreTwo.Arn
        Next: pendingPick
      pendingPick:
        Type: Task
        Resource: arn:${AWS::Partition}:states:::lambda:invoke.waitForTaskToken
        Parameters:
          FunctionName: !GetAtt pendingInput.Arn
          Payload:
          - taskToken.$: $$.Task.Token
          - order.$: "$"
        Next: emailCustomer
      emailCustomer:
        Type: Task
        Resource: !GetAtt emailCustomerTwo.Arn
        End: true

ThirdStateMachine:
  name: third${self:provider.stage}StateMachine
  role: !GetAtt StateMachineRole.Arn
  definition:
    Comment: "Third iteration"
    StartAt: createInvoice
    States:
      createInvoice:
        Type: Task
        Resource: !GetAtt createInvoiceThree.Arn
        Next: createOrderRecord
        Retry: ${self:custom.retryStep}
        Catch: ${self:custom.catchStep}
      createOrderRecord:
        Type: Task
        Resource: !GetAtt createOrderRecordThree.Arn
        Next: notifyStore
        Retry: ${self:custom.retryStep}
        Catch: ${self:custom.catchStep}
      notifyStore:
        Type: Task
        Resource: !GetAtt notifyStoreThree.Arn
        Next: pendingPick
        Retry: ${self:custom.retryStep}
        Catch: ${self:custom.catchStep}
      pendingPick:
        Type: Task
        Resource: arn:${AWS::Partition}:states:::lambda:invoke.waitForTaskToken
        Parameters:
          FunctionName: !GetAtt pendingInput.Arn
          Payload:
          - taskToken.$: $$.Task.Token
          - order.$: "$"
        Retry: ${self:custom.retryStep}
        Catch: ${self:custom.catchStep}
        Next: emailCustomer
      emailCustomer:
        Type: Task
        Resource: !GetAtt emailCustomerThree.Arn
        Retry: ${self:custom.retryStep}
        Catch: ${self:custom.catchStep}
        End: true
      SendErrorQueueState:
        Type: Task
        Resource: !GetAtt sendToErrorQueue.Arn
        Retry: ${self:custom.retryStep}
        Next: FinalErrorState
      FinalErrorState:
        Type: Fail





